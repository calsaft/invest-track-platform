
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { toast } from "sonner";

const SUPABASE_URL = "https://cqamurpuhqzevgzhqjwk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNxYW11cnB1aHF6ZXZnemhxandrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY0MjU2NzEsImV4cCI6MjA2MjAwMTY3MX0.-Q63kAfyqb1slDEM9ep19v8Jd2DzLfRDX6ZXrySsotE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY, 
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      storage: localStorage
    }
  }
);

// Create a helper function to initialize admin users if needed
export const initializeAdminUsers = async () => {
  try {
    const admins = [
      {
        email: 'admin@example.com',
        password: 'admin123',
        name: 'Admin User',
        role: 'admin',
        balance: 10000
      },
      {
        email: 'Gurutech@gmail.com',
        password: 'Guru2030',
        name: 'Gurutech',
        role: 'admin',
        balance: 10000
      },
      {
        email: 'caltech@gmail.com',
        password: 'Caltech2030',
        name: 'Caltech',
        role: 'admin',
        balance: 10000
      }
    ];

    console.log("Initializing admin users...");

    for (const admin of admins) {
      try {
        // Check if profile exists
        const { data: existingProfile, error: profileError } = await supabase
          .from('profiles')
          .select('*')
          .eq('email', admin.email)
          .maybeSingle();
          
        if (profileError) {
          console.error(`Error checking profile for ${admin.email}:`, profileError);
          continue;
        }

        if (!existingProfile) {
          console.log(`Creating admin account for ${admin.email}`);
          
          // Try to sign in first to see if auth user exists
          const { data: authData, error: signInError } = await supabase.auth.signInWithPassword({
            email: admin.email,
            password: admin.password
          });
          
          if (signInError && signInError.message !== "Invalid login credentials") {
            console.error(`Error signing in as ${admin.email}:`, signInError);
            continue;
          }
          
          // If no auth user, create one
          if (!authData?.user) {
            const { data: signUpData, error: signUpError } = await supabase.auth.signUp({
              email: admin.email,
              password: admin.password,
              options: {
                data: {
                  name: admin.name,
                  role: 'admin'
                }
              }
            });
            
            if (signUpError) {
              console.error(`Error creating auth account for ${admin.email}:`, signUpError);
              continue;
            }
            
            // Manually create profile if needed
            if (signUpData?.user) {
              const { error: insertError } = await supabase.from('profiles').insert({
                id: signUpData.user.id,
                email: admin.email,
                name: admin.name,
                role: 'admin',
                balance: admin.balance,
                referral_code: Math.random().toString(36).substring(2, 10)
              });
              
              if (insertError) {
                console.error(`Error inserting profile for ${admin.email}:`, insertError);
              } else {
                console.log(`Successfully created admin account for ${admin.email}`);
              }
            }
          }
        } else {
          console.log(`Admin account for ${admin.email} already exists`);
        }
      } catch (adminError) {
        console.error(`Unexpected error processing admin ${admin.email}:`, adminError);
      }
    }
  } catch (error) {
    console.error("Failed to initialize admin users:", error);
  }
};

// Export a helper function to check if Supabase connection is working
export const checkSupabaseConnection = async () => {
  try {
    // Try a simple query to check connectivity
    const { data, error } = await supabase.from('profiles').select('id').limit(1);
    
    if (error) {
      console.error("Supabase connection check failed:", error);
      return false;
    }
    
    console.log("Supabase connection successful");
    return true;
  } catch (error) {
    console.error("Failed to connect to Supabase:", error);
    toast.error("Failed to connect to the database. Please check your internet connection.");
    return false;
  }
};
